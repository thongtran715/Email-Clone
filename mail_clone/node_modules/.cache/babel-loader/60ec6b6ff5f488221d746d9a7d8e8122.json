{"ast":null,"code":"import _classCallCheck from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/src/Component/Email.jsx\";\nimport React from \"react\";\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport { TalkBox } from \"react-talk\";\n\nvar randomstring = require(\"randomstring\");\n\nvar Email =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Email, _React$Component);\n\n  function Email(props) {\n    var _this;\n\n    _classCallCheck(this, Email);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Email).call(this, props));\n\n    _this.sendMessage = function (msg) {\n      _this.clientRef.sendMessage('/topics/all', msg);\n    };\n\n    _this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n    _this.randomUserId = randomstring.generate();\n    _this.state = {\n      clientConnected: false,\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Email, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(TalkBox, {\n        topic: \"react-websocket-template\",\n        currentUserId: this.randomUserId,\n        currentUser: this.randomUserName,\n        messages: this.state.messages,\n        onSendMessage: this.sendMessage,\n        connected: this.state.clientConnected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }), React.createElement(SockJsClient, {\n        url: wsSourceUrl,\n        topics: [\"/topic/all\"],\n        onMessage: this.onMessageReceive,\n        ref: function ref(client) {\n          _this2.clientRef = client;\n        },\n        onConnect: function onConnect() {\n          _this2.setState({\n            clientConnected: true\n          });\n        },\n        onDisconnect: function onDisconnect() {\n          _this2.setState({\n            clientConnected: false\n          });\n        },\n        debug: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Email;\n}(React.Component);\n\nexport { Email as default };","map":{"version":3,"sources":["/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/src/Component/Email.jsx"],"names":["React","SockJsClient","UsernameGenerator","TalkBox","randomstring","require","Email","props","sendMessage","msg","clientRef","randomUserName","generateUsername","randomUserId","generate","state","clientConnected","messages","wsSourceUrl","onMessageReceive","client","setState","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,aAAzB;AACA,OAAOC,iBAAP,MAA8B,oBAA9B;AACA,SAASC,OAAT,QAAwB,YAAxB;;AACA,IAAMC,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA5B;;IAEqBC,K;;;;;AACjB,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,+EAAMA,KAAN;;AADe,UASnBC,WATmB,GASL,UAACC,GAAD,EAAS;AACnB,YAAKC,SAAL,CAAeF,WAAf,CAA2B,aAA3B,EAA0CC,GAA1C;AACH,KAXkB;;AAEf,UAAKE,cAAL,GAAsBT,iBAAiB,CAACU,gBAAlB,CAAmC,GAAnC,CAAtB;AACA,UAAKC,YAAL,GAAoBT,YAAY,CAACU,QAAb,EAApB;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,eAAe,EAAE,KADR;AAETC,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAJe;AAQlB;;;;6BAKQ;AAAA;;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAC,0BAAf;AAA0C,QAAA,aAAa,EAAG,KAAKJ,YAA/D;AACS,QAAA,WAAW,EAAG,KAAKF,cAD5B;AAC6C,QAAA,QAAQ,EAAG,KAAKI,KAAL,CAAWE,QADnE;AAES,QAAA,aAAa,EAAG,KAAKT,WAF9B;AAE4C,QAAA,SAAS,EAAG,KAAKO,KAAL,CAAWC,eAFnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAKI,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAGE,WAApB;AAAkC,QAAA,MAAM,EAAE,CAAC,YAAD,CAA1C;AACc,QAAA,SAAS,EAAG,KAAKC,gBAD/B;AACkD,QAAA,GAAG,EAAG,aAACC,MAAD,EAAY;AAAE,UAAA,MAAI,CAACV,SAAL,GAAiBU,MAAjB;AAAyB,SAD/F;AAEc,QAAA,SAAS,EAAG,qBAAM;AAAE,UAAA,MAAI,CAACC,QAAL,CAAc;AAAEL,YAAAA,eAAe,EAAE;AAAnB,WAAd;AAA0C,SAF5E;AAGc,QAAA,YAAY,EAAG,wBAAM;AAAE,UAAA,MAAI,CAACK,QAAL,CAAc;AAAEL,YAAAA,eAAe,EAAE;AAAnB,WAAd;AAA2C,SAHhF;AAIc,QAAA,KAAK,EAAG,KAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CADJ;AAaH;;;;EA5B8BhB,KAAK,CAACsB,S;;SAApBhB,K","sourcesContent":["import React from \"react\";\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport { TalkBox } from \"react-talk\";\nconst randomstring = require(\"randomstring\");\n\nexport default class Email extends React.Component {\n    constructor(props) {\n        super(props);\n        this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n        this.randomUserId = randomstring.generate();\n        this.state = {\n            clientConnected: false,\n            messages: []\n        };\n    }\n    sendMessage = (msg) => {\n        this.clientRef.sendMessage('/topics/all', msg);\n    };\n\n    render() {\n        return (\n            <div>\n                <TalkBox topic=\"react-websocket-template\" currentUserId={ this.randomUserId }\n                         currentUser={ this.randomUserName } messages={ this.state.messages }\n                         onSendMessage={ this.sendMessage } connected={ this.state.clientConnected }/>\n\n                <SockJsClient url={ wsSourceUrl } topics={[\"/topic/all\"]}\n                              onMessage={ this.onMessageReceive } ref={ (client) => { this.clientRef = client }}\n                              onConnect={ () => { this.setState({ clientConnected: true }) } }\n                              onDisconnect={ () => { this.setState({ clientConnected: false }) } }\n                              debug={ false }/>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}