{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/src/Component/Email.jsx\";\nimport React from \"react\";\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport { TalkBox } from \"react-talk\";\nimport Fetch from \"json-fetch\";\n\nvar randomstring = require(\"randomstring\");\n\nvar DEVELOPMENT_URL = \"http://localhost:8080\";\n\nvar Email =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Email, _React$Component);\n\n  function Email(props) {\n    var _this;\n\n    _classCallCheck(this, Email);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Email).call(this, props));\n\n    _this.sendMessage = function (msg) {\n      _this.clientRef.sendMessage('/topics/all', \"concac\");\n    };\n\n    _this.onMessageReceive = function (msg, topic) {\n      _this.setState(function (prevState) {\n        return {\n          messages: [].concat(_toConsumableArray(prevState.messages), [msg])\n        };\n      });\n    };\n\n    _this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n    _this.randomUserId = randomstring.generate();\n    _this.onChangeMessage = _this.onChangeMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.submit = _this.submit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      clientConnected: false,\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Email, [{\n    key: \"onChangeMessage\",\n    value: function onChangeMessage(event) {\n      console.log(\"hello\");\n    }\n  }, {\n    key: \"submit\",\n    value: function submit(e) {\n      e.preventDefault();\n      console.log(\"submit\");\n\n      try {\n        this.clientRef.sendMessage(\"/app/all\", JSON.stringify({\n          \"content\": \"asdad\",\n          \"fromUser\": \"thongtran715\",\n          \"toUser\": \"tinele\"\n        }));\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var url, response, body;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = DEVELOPMENT_URL + \"/mail/tienle123\";\n                _context.next = 3;\n                return fetch(url);\n\n              case 3:\n                response = _context.sent;\n                _context.next = 6;\n                return response.json();\n\n              case 6:\n                body = _context.sent;\n                console.log(\"Here is the response\");\n                console.log(body);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(TalkBox, {\n        topic: \"react-websocket-template\",\n        currentUserId: this.randomUserId,\n        currentUser: this.randomUserName,\n        messages: this.state.messages,\n        onSendMessage: this.sendMessage,\n        connected: this.state.clientConnected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        onSubmit: this.submit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        onChange: this.onChangeMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Submit\")), React.createElement(SockJsClient, {\n        url: DEVELOPMENT_URL + \"/ws\",\n        topics: [\"/topic/all\"],\n        onMessage: this.onMessageReceive,\n        ref: function ref(client) {\n          _this2.clientRef = client;\n        },\n        onConnect: function onConnect() {\n          _this2.setState({\n            clientConnected: true\n          });\n        },\n        onDisconnect: function onDisconnect() {\n          _this2.setState({\n            clientConnected: false\n          });\n        },\n        debug: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Email;\n}(React.Component);\n\nexport { Email as default };","map":{"version":3,"sources":["/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/src/Component/Email.jsx"],"names":["React","SockJsClient","UsernameGenerator","TalkBox","Fetch","randomstring","require","DEVELOPMENT_URL","Email","props","sendMessage","msg","clientRef","onMessageReceive","topic","setState","prevState","messages","randomUserName","generateUsername","randomUserId","generate","onChangeMessage","bind","submit","state","clientConnected","event","console","log","e","preventDefault","JSON","stringify","url","fetch","response","json","body","client","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport { TalkBox } from \"react-talk\";\nimport Fetch from \"json-fetch\";\nconst randomstring = require(\"randomstring\");\nconst DEVELOPMENT_URL = \"http://localhost:8080\";\nexport default class Email extends React.Component {\n    constructor(props) {\n        super(props);\n        this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n        this.randomUserId = randomstring.generate();\n        this.onChangeMessage = this.onChangeMessage.bind(this);\n        this.submit = this.submit.bind(this);\n        this.state = {\n            clientConnected: false,\n            messages: []\n        };\n    }\n     onChangeMessage(event){\n        console.log(\"hello\")\n    }\n    sendMessage = (msg) => {\n        this.clientRef.sendMessage('/topics/all', \"concac\");\n    };\n    submit(e){\n        e.preventDefault();\n        console.log(\"submit\")\n        try {\n            this.clientRef.sendMessage(\"/app/all\", JSON.stringify({\"content\": \"asdad\", \"fromUser\": \"thongtran715\", \"toUser\": \"tinele\"}));\n            return true;\n        } catch(e) {\n            return false;\n        }\n    }\n    onMessageReceive = (msg, topic) => {\n        this.setState(prevState => ({\n            messages: [...prevState.messages, msg]\n        }));\n    };\n    async componentWillMount() {\n        var url = DEVELOPMENT_URL + \"/mail/tienle123\";\n        const response = await fetch(url);\n        const body = await response.json();\n        console.log(\"Here is the response\")\n        console.log(body);\n    };\n    render() {\n        return (\n            <div>\n                <TalkBox topic=\"react-websocket-template\" currentUserId={ this.randomUserId }\n                         currentUser={ this.randomUserName } messages={ this.state.messages }\n                         onSendMessage={ this.sendMessage } connected={ this.state.clientConnected }/>\n                <form onSubmit={this.submit}>\n                    <input type=\"text\" onChange={this.onChangeMessage}/>\n                    <button type=\"submit\">Submit</button>\n                </form>\n                <SockJsClient url= {DEVELOPMENT_URL + \"/ws\"}   topics={[\"/topic/all\"]}\n                              onMessage={ this.onMessageReceive } ref={ (client) => { this.clientRef = client }}\n                              onConnect={ () => { this.setState({ clientConnected: true }) } }\n                              onDisconnect={ () => { this.setState({ clientConnected: false }) } }\n                              debug={ false }/>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}