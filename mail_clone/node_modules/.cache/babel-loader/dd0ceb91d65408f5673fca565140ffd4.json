{"ast":null,"code":"import _toConsumableArray from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/src/Component/Email.jsx\";\nimport React from \"react\";\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport { TalkBox } from \"react-talk\";\n\nvar randomstring = require(\"randomstring\");\n\nvar Email =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Email, _React$Component);\n\n  function Email(props) {\n    var _this;\n\n    _classCallCheck(this, Email);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Email).call(this, props));\n\n    _this.sendMessage = function (msg) {\n      _this.clientRef.sendMessage('/topics/all', msg);\n    };\n\n    _this.onMessageReceive = function (msg, topic) {\n      _this.setState(function (prevState) {\n        return {\n          messages: [].concat(_toConsumableArray(prevState.messages), [msg])\n        };\n      });\n    };\n\n    _this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n    _this.randomUserId = randomstring.generate();\n    _this.state = {\n      clientConnected: false,\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Email, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var wsSourceUrl = window.location.protocol + \"//\" + window.location.host + \"/handler\";\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(TalkBox, {\n        currentUserId: this.randomUserId,\n        currentUser: this.randomUserName,\n        messages: this.state.messages,\n        onSendMessage: this.sendMessage,\n        connected: this.state.clientConnected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }), React.createElement(SockJsClient, {\n        url: wsSourceUrl,\n        topics: [\"/topic/all\"],\n        onMessage: this.onMessageReceive,\n        ref: function ref(client) {\n          _this2.clientRef = client;\n        },\n        onConnect: function onConnect() {\n          _this2.setState({\n            clientConnected: true\n          });\n        },\n        onDisconnect: function onDisconnect() {\n          _this2.setState({\n            clientConnected: false\n          });\n        },\n        debug: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Email;\n}(React.Component);\n\nexport { Email as default };","map":{"version":3,"sources":["/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/src/Component/Email.jsx"],"names":["React","SockJsClient","UsernameGenerator","TalkBox","randomstring","require","Email","props","sendMessage","msg","clientRef","onMessageReceive","topic","setState","prevState","messages","randomUserName","generateUsername","randomUserId","generate","state","clientConnected","wsSourceUrl","window","location","protocol","host","client","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,aAAzB;AACA,OAAOC,iBAAP,MAA8B,oBAA9B;AACA,SAASC,OAAT,QAAwB,YAAxB;;AACA,IAAMC,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA5B;;IAEqBC,K;;;;;AACjB,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,+EAAMA,KAAN;;AADe,UASnBC,WATmB,GASL,UAACC,GAAD,EAAS;AACnB,YAAKC,SAAL,CAAeF,WAAf,CAA2B,aAA3B,EAA0CC,GAA1C;AACH,KAXkB;;AAAA,UAYnBE,gBAZmB,GAYA,UAACF,GAAD,EAAMG,KAAN,EAAgB;AAC/B,YAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AACxBC,UAAAA,QAAQ,+BAAMD,SAAS,CAACC,QAAhB,IAA0BN,GAA1B;AADgB,SAAL;AAAA,OAAvB;AAGH,KAhBkB;;AAEf,UAAKO,cAAL,GAAsBd,iBAAiB,CAACe,gBAAlB,CAAmC,GAAnC,CAAtB;AACA,UAAKC,YAAL,GAAoBd,YAAY,CAACe,QAAb,EAApB;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,eAAe,EAAE,KADR;AAETN,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAJe;AAQlB;;;;yCAUoB,CAEpB;;;6BACQ;AAAA;;AACL,UAAMO,WAAW,GAAGC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GAA2B,IAA3B,GAAkCF,MAAM,CAACC,QAAP,CAAgBE,IAAlD,GAAyD,UAA7E;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,OAAD;AAAU,QAAA,aAAa,EAAG,KAAKR,YAA/B;AACS,QAAA,WAAW,EAAG,KAAKF,cAD5B;AAC6C,QAAA,QAAQ,EAAG,KAAKI,KAAL,CAAWL,QADnE;AAES,QAAA,aAAa,EAAG,KAAKP,WAF9B;AAE4C,QAAA,SAAS,EAAG,KAAKY,KAAL,CAAWC,eAFnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAKI,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAGC,WAApB;AAAkC,QAAA,MAAM,EAAE,CAAC,YAAD,CAA1C;AACc,QAAA,SAAS,EAAG,KAAKX,gBAD/B;AACkD,QAAA,GAAG,EAAG,aAACgB,MAAD,EAAY;AAAE,UAAA,MAAI,CAACjB,SAAL,GAAiBiB,MAAjB;AAAyB,SAD/F;AAEc,QAAA,SAAS,EAAG,qBAAM;AAAE,UAAA,MAAI,CAACd,QAAL,CAAc;AAAEQ,YAAAA,eAAe,EAAE;AAAnB,WAAd;AAA0C,SAF5E;AAGc,QAAA,YAAY,EAAG,wBAAM;AAAE,UAAA,MAAI,CAACR,QAAL,CAAc;AAAEQ,YAAAA,eAAe,EAAE;AAAnB,WAAd;AAA2C,SAHhF;AAIc,QAAA,KAAK,EAAG,KAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CADJ;AAaH;;;;EArC8BrB,KAAK,CAAC4B,S;;SAApBtB,K","sourcesContent":["import React from \"react\";\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport { TalkBox } from \"react-talk\";\nconst randomstring = require(\"randomstring\");\n\nexport default class Email extends React.Component {\n    constructor(props) {\n        super(props);\n        this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n        this.randomUserId = randomstring.generate();\n        this.state = {\n            clientConnected: false,\n            messages: []\n        };\n    }\n    sendMessage = (msg) => {\n        this.clientRef.sendMessage('/topics/all', msg);\n    };\n    onMessageReceive = (msg, topic) => {\n        this.setState(prevState => ({\n            messages: [...prevState.messages, msg]\n        }));\n    }\n\n    componentWillMount() {\n\n    }\n    render() {\n        const wsSourceUrl = window.location.protocol + \"//\" + window.location.host + \"/handler\";\n        return (\n            <div>\n                <TalkBox  currentUserId={ this.randomUserId }\n                         currentUser={ this.randomUserName } messages={ this.state.messages }\n                         onSendMessage={ this.sendMessage } connected={ this.state.clientConnected }/>\n\n                <SockJsClient url={ wsSourceUrl } topics={[\"/topic/all\"]}\n                              onMessage={ this.onMessageReceive } ref={ (client) => { this.clientRef = client }}\n                              onConnect={ () => { this.setState({ clientConnected: true }) } }\n                              onDisconnect={ () => { this.setState({ clientConnected: false }) } }\n                              debug={ false }/>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}