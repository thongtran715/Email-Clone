{"ast":null,"code":"'use strict';\n\nvar errcode = require('err-code');\n\nvar retry = require('retry');\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction isRetryError(err) {\n  return err && err.code === 'EPROMISERETRY' && hasOwn.call(err, 'retried');\n}\n\nfunction promiseRetry(fn, options) {\n  var temp;\n  var operation;\n\n  if (typeof fn === 'object' && typeof options === 'function') {\n    // Swap options and fn when using alternate signature (options, fn)\n    temp = options;\n    options = fn;\n    fn = temp;\n  }\n\n  operation = retry.operation(options);\n  return new Promise(function (resolve, reject) {\n    operation.attempt(function (number) {\n      Promise.resolve().then(function () {\n        return fn(function (err) {\n          if (isRetryError(err)) {\n            err = err.retried;\n          }\n\n          throw errcode('Retrying', 'EPROMISERETRY', {\n            retried: err\n          });\n        }, number);\n      }).then(resolve, function (err) {\n        if (isRetryError(err)) {\n          err = err.retried;\n\n          if (operation.retry(err || new Error())) {\n            return;\n          }\n        }\n\n        reject(err);\n      });\n    });\n  });\n}\n\nmodule.exports = promiseRetry;","map":null,"metadata":{},"sourceType":"script"}