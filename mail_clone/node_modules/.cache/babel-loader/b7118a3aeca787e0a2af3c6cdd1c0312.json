{"ast":null,"code":"import _toConsumableArray from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/src/Component/Email.jsx\";\nimport React from \"react\";\nimport ReactDom from \"react-dom\";\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport Fetch from \"json-fetch\";\nimport { TalkBox } from \"react-talk\";\n\nvar randomstring = require(\"randomstring\");\n\nvar Email =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Email, _React$Component);\n\n  function Email(props) {\n    var _this;\n\n    _classCallCheck(this, Email);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Email).call(this, props)); // randomUserId is used to emulate a unique user id for this demo usage\n\n    _this.onMessageReceive = function (msg, topic) {\n      _this.setState(function (prevState) {\n        return {\n          messages: [].concat(_toConsumableArray(prevState.messages), [msg])\n        };\n      });\n    };\n\n    _this.sendMessage = function (msg, selfMsg) {\n      try {\n        _this.clientRef.sendMessage(\"/app/all\", JSON.stringify(selfMsg));\n\n        return true;\n      } catch (e) {\n        return false;\n      }\n    };\n\n    _this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n    _this.randomUserId = randomstring.generate();\n    _this.state = {\n      clientConnected: false,\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Email, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      Fetch(\"/history\", {\n        method: \"GET\"\n      }).then(function (response) {\n        _this2.setState({\n          messages: response.body\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var wsSourceUrl = window.location.protocol + \"//\" + window.location.host + \"/handler\";\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(TalkBox, {\n        topic: \"react-websocket-template\",\n        currentUserId: this.randomUserId,\n        currentUser: this.randomUserName,\n        messages: this.state.messages,\n        onSendMessage: this.sendMessage,\n        connected: this.state.clientConnected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(SockJsClient, {\n        url: wsSourceUrl,\n        topics: [\"/topic/all\"],\n        onMessage: this.onMessageReceive,\n        ref: function ref(client) {\n          _this3.clientRef = client;\n        },\n        onConnect: function onConnect() {\n          _this3.setState({\n            clientConnected: true\n          });\n        },\n        onDisconnect: function onDisconnect() {\n          _this3.setState({\n            clientConnected: false\n          });\n        },\n        debug: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Email;\n}(React.Component);\n\nexport { Email as default };","map":{"version":3,"sources":["/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/src/Component/Email.jsx"],"names":["React","ReactDom","SockJsClient","UsernameGenerator","Fetch","TalkBox","randomstring","require","Email","props","onMessageReceive","msg","topic","setState","prevState","messages","sendMessage","selfMsg","clientRef","JSON","stringify","e","randomUserName","generateUsername","randomUserId","generate","state","clientConnected","method","then","response","body","wsSourceUrl","window","location","protocol","host","client","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport Fetch from \"json-fetch\";\nimport { TalkBox } from \"react-talk\";\n\nconst randomstring = require(\"randomstring\");\n\nexport default class Email extends React.Component {\n    constructor(props) {\n        super(props);\n        // randomUserId is used to emulate a unique user id for this demo usage\n        this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n        this.randomUserId = randomstring.generate();\n        this.state = {\n            clientConnected: false,\n            messages: []\n        };\n    }\n\n    onMessageReceive = (msg, topic) => {\n        this.setState(prevState => ({\n            messages: [...prevState.messages, msg]\n        }));\n    }\n\n    sendMessage = (msg, selfMsg) => {\n        try {\n            this.clientRef.sendMessage(\"/app/all\", JSON.stringify(selfMsg));\n            return true;\n        } catch(e) {\n            return false;\n        }\n    }\n\n    componentWillMount() {\n        Fetch(\"/history\", {\n            method: \"GET\"\n        }).then((response) => {\n            this.setState({ messages: response.body });\n        });\n    }\n\n    render() {\n        const wsSourceUrl = window.location.protocol + \"//\" + window.location.host + \"/handler\";\n        return (\n            <div>\n                <TalkBox topic=\"react-websocket-template\" currentUserId={ this.randomUserId }\n                         currentUser={ this.randomUserName } messages={ this.state.messages }\n                         onSendMessage={ this.sendMessage } connected={ this.state.clientConnected }/>\n\n                <SockJsClient url={ wsSourceUrl } topics={[\"/topic/all\"]}\n                              onMessage={ this.onMessageReceive } ref={ (client) => { this.clientRef = client }}\n                              onConnect={ () => { this.setState({ clientConnected: true }) } }\n                              onDisconnect={ () => { this.setState({ clientConnected: false }) } }\n                              debug={ false }/>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}