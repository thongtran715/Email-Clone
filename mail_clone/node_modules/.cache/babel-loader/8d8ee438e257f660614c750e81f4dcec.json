{"ast":null,"code":"import _toConsumableArray from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/src/Component/Email.jsx\";\nimport React, { Component } from 'react';\nimport SockJsClient from 'react-stomp';\nimport UsernameGenerator from \"username-generator\";\nimport { TalkBox } from \"react-talk\";\n\nvar randomstring = require(\"randomstring\");\n\nvar Email =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Email, _Component);\n\n  function Email(props) {\n    var _this;\n\n    _classCallCheck(this, Email);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Email).call(this, props));\n\n    _this.onMessageReceive = function (msg, topic) {\n      _this.setState(function (prevState) {\n        return {\n          messages: [].concat(_toConsumableArray(prevState.messages), [msg])\n        };\n      });\n    };\n\n    _this.sendMessage = function (msg, selfMsg) {\n      try {\n        _this.clientRef.sendMessage(\"/app/all\", JSON.stringify(selfMsg));\n\n        return true;\n      } catch (e) {\n        return false;\n      }\n    };\n\n    _this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n    _this.randomUserId = randomstring.generate();\n    _this.state = {\n      clientConnected: false,\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Email, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var wsSourceUrl = window.location.protocol + \"//\" + window.location.host + \"/handler\";\n      console.log(wsSourceUrl);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(TalkBox, {\n        topic: \"react-websocket-template\",\n        currentUserId: this.randomUserId,\n        currentUser: this.randomUserName,\n        messages: this.state.messages,\n        onSendMessage: this.sendMessage,\n        connected: this.state.clientConnected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), React.createElement(SockJsClient, {\n        url: wsSourceUrl,\n        topics: [\"/topic/all\"],\n        onMessage: this.onMessageReceive,\n        ref: function ref(client) {\n          _this2.clientRef = client;\n        },\n        onConnect: function onConnect() {\n          _this2.setState({\n            clientConnected: true\n          });\n        },\n        onDisconnect: function onDisconnect() {\n          _this2.setState({\n            clientConnected: false\n          });\n        },\n        debug: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Email;\n}(Component);\n\nexport default Email;","map":{"version":3,"sources":["/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/src/Component/Email.jsx"],"names":["React","Component","SockJsClient","UsernameGenerator","TalkBox","randomstring","require","Email","props","onMessageReceive","msg","topic","setState","prevState","messages","sendMessage","selfMsg","clientRef","JSON","stringify","e","randomUserName","generateUsername","randomUserId","generate","state","clientConnected","wsSourceUrl","window","location","protocol","host","console","log","client"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,YAAP,MAAyB,aAAzB;AACA,OAAOC,iBAAP,MAA8B,oBAA9B;AACA,SAASC,OAAT,QAAwB,YAAxB;;AACA,IAAMC,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA5B;;IACMC,K;;;;;AACF,iBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,+EAAMA,KAAN;;AADc,UAUlBC,gBAVkB,GAUC,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAC/B,YAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AACxBC,UAAAA,QAAQ,+BAAMD,SAAS,CAACC,QAAhB,IAA0BJ,GAA1B;AADgB,SAAL;AAAA,OAAvB;AAGH,KAdiB;;AAAA,UAgBlBK,WAhBkB,GAgBJ,UAACL,GAAD,EAAMM,OAAN,EAAkB;AAC5B,UAAI;AACA,cAAKC,SAAL,CAAeF,WAAf,CAA2B,UAA3B,EAAuCG,IAAI,CAACC,SAAL,CAAeH,OAAf,CAAvC;;AACA,eAAO,IAAP;AACH,OAHD,CAGE,OAAMI,CAAN,EAAS;AACP,eAAO,KAAP;AACH;AACJ,KAvBiB;;AAEd,UAAKC,cAAL,GAAsBlB,iBAAiB,CAACmB,gBAAlB,CAAmC,GAAnC,CAAtB;AACA,UAAKC,YAAL,GAAoBlB,YAAY,CAACmB,QAAb,EAApB;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,eAAe,EAAE,KADR;AAETZ,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAJc;AAQjB;;;;6BAiBQ;AAAA;;AACL,UAAMa,WAAW,GAAGC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GAA2B,IAA3B,GAAkCF,MAAM,CAACC,QAAP,CAAgBE,IAAlD,GAAyD,UAA7E;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAC,0BAAf;AAA0C,QAAA,aAAa,EAAG,KAAKJ,YAA/D;AACS,QAAA,WAAW,EAAG,KAAKF,cAD5B;AAC6C,QAAA,QAAQ,EAAG,KAAKI,KAAL,CAAWX,QADnE;AAES,QAAA,aAAa,EAAG,KAAKC,WAF9B;AAE4C,QAAA,SAAS,EAAG,KAAKU,KAAL,CAAWC,eAFnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAKI,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAGC,WAApB;AAAkC,QAAA,MAAM,EAAE,CAAC,YAAD,CAA1C;AACc,QAAA,SAAS,EAAG,KAAKlB,gBAD/B;AACkD,QAAA,GAAG,EAAG,aAACyB,MAAD,EAAY;AAAE,UAAA,MAAI,CAACjB,SAAL,GAAiBiB,MAAjB;AAAyB,SAD/F;AAEc,QAAA,SAAS,EAAG,qBAAM;AAAE,UAAA,MAAI,CAACtB,QAAL,CAAc;AAAEc,YAAAA,eAAe,EAAE;AAAnB,WAAd;AAA0C,SAF5E;AAGc,QAAA,YAAY,EAAG,wBAAM;AAAE,UAAA,MAAI,CAACd,QAAL,CAAc;AAAEc,YAAAA,eAAe,EAAE;AAAnB,WAAd;AAA2C,SAHhF;AAIc,QAAA,KAAK,EAAG,KAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CADJ;AAaH;;;;EA1CezB,S;;AA6CpB,eAAeM,KAAf","sourcesContent":["import React, {Component} from 'react';\nimport SockJsClient from 'react-stomp';\nimport UsernameGenerator from \"username-generator\";\nimport { TalkBox } from \"react-talk\";\nconst randomstring = require(\"randomstring\");\nclass Email extends Component {\n    constructor(props){\n        super(props);\n        this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n        this.randomUserId = randomstring.generate();\n        this.state = {\n            clientConnected: false,\n            messages: []\n        };\n    }\n\n    onMessageReceive = (msg, topic) => {\n        this.setState(prevState => ({\n            messages: [...prevState.messages, msg]\n        }));\n    }\n\n    sendMessage = (msg, selfMsg) => {\n        try {\n            this.clientRef.sendMessage(\"/app/all\", JSON.stringify(selfMsg));\n            return true;\n        } catch(e) {\n            return false;\n        }\n    }\n\n    render() {\n        const wsSourceUrl = window.location.protocol + \"//\" + window.location.host + \"/handler\";\n        console.log(wsSourceUrl);\n        return (\n            <div>\n                <TalkBox topic=\"react-websocket-template\" currentUserId={ this.randomUserId }\n                         currentUser={ this.randomUserName } messages={ this.state.messages }\n                         onSendMessage={ this.sendMessage } connected={ this.state.clientConnected }/>\n\n                <SockJsClient url={ wsSourceUrl } topics={[\"/topic/all\"]}\n                              onMessage={ this.onMessageReceive } ref={ (client) => { this.clientRef = client }}\n                              onConnect={ () => { this.setState({ clientConnected: true }) } }\n                              onDisconnect={ () => { this.setState({ clientConnected: false }) } }\n                              debug={ false }/>\n            </div>\n        );\n    }\n}\n\nexport default Email;"]},"metadata":{},"sourceType":"module"}