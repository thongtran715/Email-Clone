{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/src/Component/Email.jsx\";\nimport React from \"react\";\nimport SockJsClient from \"react-stomp\";\nimport MailList from \"./MailListReceive\";\nvar DEVELOPMENT_URL = \"http://localhost:8080\";\n\nvar Email =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Email, _React$Component);\n\n  function Email(props) {\n    var _this;\n\n    _classCallCheck(this, Email);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Email).call(this, props));\n\n    _this.onMessageReceive = function (msg, topic) {\n      _this.setState(function (prevState) {\n        return {\n          messages: [msg].concat(_toConsumableArray(prevState.messages))\n        };\n      });\n    };\n\n    _this.onSendMessage = function (sendTo, title, content) {\n      try {\n        _this.clientRef.sendMessage(\"/app/all\", JSON.stringify({\n          \"content\": content,\n          \"fromUser\": localStorage.getItem(\"username\"),\n          \"toUser\": sendTo,\n          \"title\": title\n        }));\n\n        return true;\n      } catch (e) {\n        return false;\n      }\n    };\n\n    _this.fetchMessages = _this.fetchMessages.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fetchAllUsers = _this.fetchAllUsers.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      clientConnected: false,\n      messages: [],\n      allUsers: []\n    };\n    return _this;\n  }\n\n  _createClass(Email, [{\n    key: \"fetchMessages\",\n    value: function () {\n      var _fetchMessages = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var url, response, body, meggs, i;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = DEVELOPMENT_URL + \"/mail/receive/\" + localStorage.getItem(\"username\");\n                _context.next = 3;\n                return fetch(url);\n\n              case 3:\n                response = _context.sent;\n                _context.next = 6;\n                return response.json();\n\n              case 6:\n                body = _context.sent;\n                meggs = [];\n\n                for (i = 0; i < body.length; ++i) {\n                  meggs.push(body[i]);\n                }\n\n                this.setState({\n                  messages: [].concat(_toConsumableArray(this.state.messages), meggs)\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchMessages() {\n        return _fetchMessages.apply(this, arguments);\n      }\n\n      return fetchMessages;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.fetchMessages();\n                this.fetchAllUsers();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"fetchAllUsers\",\n    value: function () {\n      var _fetchAllUsers = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var url, response, body, users, i, contact;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                url = DEVELOPMENT_URL + \"/allUsers\";\n                _context3.next = 3;\n                return fetch(url);\n\n              case 3:\n                response = _context3.sent;\n                _context3.next = 6;\n                return response.json();\n\n              case 6:\n                body = _context3.sent;\n                users = [];\n\n                for (i = 0; i < body.length; ++i) {\n                  contact = {\n                    key: body[i]['username'],\n                    value: body[i]['username']\n                  };\n                  users.push(contact);\n                }\n\n                this.setState({\n                  allUsers: [].concat(_toConsumableArray(this.state.allUsers), users)\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function fetchAllUsers() {\n        return _fetchAllUsers.apply(this, arguments);\n      }\n\n      return fetchAllUsers;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(MailList, {\n        messages: this.state.messages,\n        allUsers: this.state.allUsers,\n        onSendMessage: this.onSendMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(SockJsClient, {\n        url: DEVELOPMENT_URL + \"/ws\",\n        topics: [\"/topic/all\"],\n        onMessage: this.onMessageReceive,\n        ref: function ref(client) {\n          _this2.clientRef = client;\n        },\n        debug: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Email;\n}(React.Component);\n\nexport { Email as default };","map":{"version":3,"sources":["/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/src/Component/Email.jsx"],"names":["React","SockJsClient","MailList","DEVELOPMENT_URL","Email","props","onMessageReceive","msg","topic","setState","prevState","messages","onSendMessage","sendTo","title","content","clientRef","sendMessage","JSON","stringify","localStorage","getItem","e","fetchMessages","bind","fetchAllUsers","state","clientConnected","allUsers","url","fetch","response","json","body","meggs","i","length","push","users","contact","key","value","client","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport SockJsClient from \"react-stomp\";\nimport MailList from \"./MailListReceive\";\nconst DEVELOPMENT_URL = \"http://localhost:8080\";\n\nexport default class Email extends React.Component {\n    constructor(props) {\n        super(props);\n        this.fetchMessages = this.fetchMessages.bind(this);\n        this.fetchAllUsers = this.fetchAllUsers.bind(this);\n        this.state = {\n            clientConnected: false,\n            messages: [],\n            allUsers :[]\n        };\n    }\n\n    onMessageReceive = (msg, topic) => {\n        this.setState(prevState => ({\n            messages: [msg,...prevState.messages]\n        }));\n    };\n    async fetchMessages(){\n        const url = DEVELOPMENT_URL + \"/mail/receive/\" + localStorage.getItem(\"username\");\n        const response = await fetch(url);\n        const body = await response.json();\n        var meggs = [];\n        for (let i = 0 ; i < body.length; ++i) {\n            meggs.push(body[i]);\n        }\n        this.setState({\n            messages: [...this.state.messages, ...meggs]\n        });\n    };\n    async componentDidMount() {\n        this.fetchMessages();\n        this.fetchAllUsers();\n    }\n    async fetchAllUsers(){\n        const url = DEVELOPMENT_URL + \"/allUsers\";\n        const response = await fetch(url);\n        const body = await response.json();\n        var users = [];\n        for (let i = 0 ; i < body.length; ++i) {\n            var contact = {\n                key: body[i]['username'],\n                value: body[i]['username']\n            };\n            users.push(contact);\n        }\n        this.setState({\n            allUsers: [...this.state.allUsers, ...users]\n        });\n    }\n    onSendMessage = (sendTo, title, content) => {\n        try {\n            this.clientRef.sendMessage(\"/app/all\", JSON.stringify({\"content\": content, \"fromUser\": localStorage.getItem(\"username\"), \"toUser\": sendTo, \"title\": title}));\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n    render() {\n        return (\n            <div>\n                <MailList messages={this.state.messages} allUsers ={this.state.allUsers} onSendMessage={this.onSendMessage}/>\n                <SockJsClient url= {DEVELOPMENT_URL + \"/ws\"}   topics={[\"/topic/all\"]}\n                              onMessage={ this.onMessageReceive } ref={ (client) => { this.clientRef = client }}\n                              debug={ false }/>\n\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}