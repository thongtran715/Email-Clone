{"ast":null,"code":"import _classCallCheck from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/src/App.js\";\nimport React from \"react\";\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport { TalkBox } from \"react-talk\";\n\nvar randomstring = require(\"randomstring\");\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.sendMessage = function (msg) {\n      _this.clientRef.sendMessage('/topics/all', msg);\n    };\n\n    _this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n    _this.randomUserId = randomstring.generate();\n    _this.state = {\n      clientConnected: false,\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(TalkBox, {\n        topic: \"react-websocket-template\",\n        currentUserId: this.randomUserId,\n        currentUser: this.randomUserName,\n        messages: this.state.messages,\n        onSendMessage: this.sendMessage,\n        connected: this.state.clientConnected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }), React.createElement(SockJsClient, {\n        url: \"http://localhost:8080/ws\",\n        topics: ['/topics/all'],\n        onMessage: function onMessage(msg) {\n          console.log(msg);\n        },\n        ref: function ref(client) {\n          _this2.clientRef = client;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/thotra/Documents/Personal/Mail_Clone_React/mail_clone/src/App.js"],"names":["React","SockJsClient","UsernameGenerator","TalkBox","randomstring","require","App","props","sendMessage","msg","clientRef","randomUserName","generateUsername","randomUserId","generate","state","clientConnected","messages","console","log","client","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,aAAzB;AACA,OAAOC,iBAAP,MAA8B,oBAA9B;AACA,SAASC,OAAT,QAAwB,YAAxB;;AACA,IAAMC,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA5B;;IAEqBC,G;;;;;AACnB,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;;AADiB,UASnBC,WATmB,GASL,UAACC,GAAD,EAAS;AACrB,YAAKC,SAAL,CAAeF,WAAf,CAA2B,aAA3B,EAA0CC,GAA1C;AACD,KAXkB;;AAEjB,UAAKE,cAAL,GAAsBT,iBAAiB,CAACU,gBAAlB,CAAmC,GAAnC,CAAtB;AACA,UAAKC,YAAL,GAAoBT,YAAY,CAACU,QAAb,EAApB;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,eAAe,EAAE,KADN;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAJiB;AAQlB;;;;6BAKQ;AAAA;;AACP,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAC,0BAAf;AAA0C,QAAA,aAAa,EAAG,KAAKJ,YAA/D;AACS,QAAA,WAAW,EAAG,KAAKF,cAD5B;AAC6C,QAAA,QAAQ,EAAG,KAAKI,KAAL,CAAWE,QADnE;AAES,QAAA,aAAa,EAAG,KAAKT,WAF9B;AAE4C,QAAA,SAAS,EAAG,KAAKO,KAAL,CAAWC,eAFnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAKE,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAC,0BAAlB;AAA6C,QAAA,MAAM,EAAE,CAAC,aAAD,CAArD;AACc,QAAA,SAAS,EAAE,mBAACP,GAAD,EAAS;AAAES,UAAAA,OAAO,CAACC,GAAR,CAAYV,GAAZ;AAAmB,SADvD;AAEc,QAAA,GAAG,EAAG,aAACW,MAAD,EAAY;AAAE,UAAA,MAAI,CAACV,SAAL,GAAiBU,MAAjB;AAAyB,SAF3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADJ;AAWD;;;;EA1B8BpB,KAAK,CAACqB,S;;SAAlBf,G","sourcesContent":["import React from \"react\";\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport { TalkBox } from \"react-talk\";\nconst randomstring = require(\"randomstring\");\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n    this.randomUserId = randomstring.generate();\n    this.state = {\n      clientConnected: false,\n      messages: []\n    };\n  }\n  sendMessage = (msg) => {\n    this.clientRef.sendMessage('/topics/all', msg);\n  };\n\n  render() {\n    return (\n        <div>\n          <TalkBox topic=\"react-websocket-template\" currentUserId={ this.randomUserId }\n                   currentUser={ this.randomUserName } messages={ this.state.messages }\n                   onSendMessage={ this.sendMessage } connected={ this.state.clientConnected }/>\n\n          <SockJsClient url='http://localhost:8080/ws' topics={['/topics/all']}\n                        onMessage={(msg) => { console.log(msg); }}\n                        ref={ (client) => { this.clientRef = client }} />\n        </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}