"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _mocha = require("mocha");

var _goodeggsTestHelpers = require("goodeggs-test-helpers");

var _ = _interopRequireDefault(require("."));

(0, _mocha.describe)('getRequestOptions',
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee() {
  return _regenerator.default.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          (0, _mocha.it)('populates an options object without undefined keys', function () {
            var expected = {
              credentials: 'include',
              headers: {
                Accept: 'application/json'
              }
            };
            var actual = (0, _.default)({});
            (0, _goodeggsTestHelpers.expect)(actual).to.deep.equal(expected);
          });
          (0, _mocha.it)('sets content type header only when there is a body', function () {
            var expected = {
              credentials: 'include',
              headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json'
              },
              body: '{"hi":"hello"}'
            };
            var actual = (0, _.default)({
              body: {
                hi: 'hello'
              }
            });
            (0, _goodeggsTestHelpers.expect)(actual).to.deep.equal(expected);
          });
          (0, _mocha.it)('includes whitelisted options', function () {
            var options = (0, _.default)({
              timeout: 123
            });
            (0, _goodeggsTestHelpers.expect)(options).to.have.property('timeout', 123);
          });
          (0, _mocha.it)('excluded non-whitelisted options', function () {
            var options = (0, _.default)({
              foo: 'bar'
            });
            (0, _goodeggsTestHelpers.expect)(options).not.to.contain.key('foo');
          });

        case 4:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
})));