"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _mocha = require("mocha");

var _goodeggsTestHelpers = require("goodeggs-test-helpers");

var _nock = _interopRequireDefault(require("nock"));

var _src = _interopRequireWildcard(require("../src"));

(0, _mocha.describe)('jsonFetch',
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee36() {
  var _useSinonSandbox, sandbox;

  return _regenerator.default.wrap(function _callee36$(_context36) {
    while (1) {
      switch (_context36.prev = _context36.next) {
        case 0:
          _useSinonSandbox = (0, _goodeggsTestHelpers.useSinonSandbox)(), sandbox = _useSinonSandbox.sandbox;
          (0, _mocha.describe)('single request with no retry',
          /*#__PURE__*/
          (0, _asyncToGenerator2.default)(
          /*#__PURE__*/
          _regenerator.default.mark(function _callee9() {
            return _regenerator.default.wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    (0, _mocha.it)('resolves with json body for 200 status codes',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee() {
                      var response;
                      return _regenerator.default.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              (0, _nock.default)('http://www.test.com').get('/products/1234').reply(200, {
                                name: 'apple'
                              });
                              _context.next = 3;
                              return (0, _src.default)('http://www.test.com/products/1234');

                            case 3:
                              response = _context.sent;
                              (0, _goodeggsTestHelpers.expect)(response.body).to.deep.equal({
                                name: 'apple'
                              });
                              (0, _goodeggsTestHelpers.expect)(response.status).to.equal(200);
                              (0, _goodeggsTestHelpers.expect)(response.statusText).to.equal('OK');
                              (0, _goodeggsTestHelpers.expect)(response.headers).to.be.ok();

                            case 8:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, this);
                    })));
                    (0, _mocha.it)('resolves with JSON body for 500 status codes',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee2() {
                      var response;
                      return _regenerator.default.wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              (0, _nock.default)('http://www.test.com').get('/products/1234').reply(500, '"Something went wrong"', {
                                'Content-Type': 'application/json'
                              });
                              _context2.next = 3;
                              return (0, _src.default)('http://www.test.com/products/1234');

                            case 3:
                              response = _context2.sent;
                              (0, _goodeggsTestHelpers.expect)(response.body).to.deep.equal('Something went wrong');
                              (0, _goodeggsTestHelpers.expect)(response.status).to.equal(500);
                              (0, _goodeggsTestHelpers.expect)(response.statusText).to.equal('Internal Server Error');
                              (0, _goodeggsTestHelpers.expect)(response.headers).to.be.ok();

                            case 8:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2, this);
                    })));
                    (0, _mocha.it)('resolves with JSON body when content-type contains other values but includes application/json',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee3() {
                      var response;
                      return _regenerator.default.wrap(function _callee3$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              (0, _nock.default)('http://www.test.com').get('/products/1234').reply(204, '[{}]', {
                                'Content-Type': 'application/json; charset=utf-8'
                              });
                              _context3.next = 3;
                              return (0, _src.default)('http://www.test.com/products/1234');

                            case 3:
                              response = _context3.sent;
                              (0, _goodeggsTestHelpers.expect)(response.body).to.deep.equal([{}]);

                            case 5:
                            case "end":
                              return _context3.stop();
                          }
                        }
                      }, _callee3, this);
                    })));
                    (0, _mocha.it)('resolves with non-JSON body',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee4() {
                      var response;
                      return _regenerator.default.wrap(function _callee4$(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              (0, _nock.default)('http://www.test.com').get('/products/1234').reply(200, 'This is not JSON', {
                                'Content-Type': 'text/plain'
                              });
                              _context4.next = 3;
                              return (0, _src.default)('http://www.test.com/products/1234');

                            case 3:
                              response = _context4.sent;
                              (0, _goodeggsTestHelpers.expect)(response.body).to.equal(undefined);

                            case 5:
                            case "end":
                              return _context4.stop();
                          }
                        }
                      }, _callee4, this);
                    })));
                    (0, _mocha.it)('rejects when there is a connection error',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee6() {
                      var errorThrown;
                      return _regenerator.default.wrap(function _callee6$(_context6) {
                        while (1) {
                          switch (_context6.prev = _context6.next) {
                            case 0:
                              sandbox.stub(global, 'fetch').callsFake(
                              /*#__PURE__*/
                              (0, _asyncToGenerator2.default)(
                              /*#__PURE__*/
                              _regenerator.default.mark(function _callee5() {
                                return _regenerator.default.wrap(function _callee5$(_context5) {
                                  while (1) {
                                    switch (_context5.prev = _context5.next) {
                                      case 0:
                                        throw new Error('Something is broken!');

                                      case 1:
                                      case "end":
                                        return _context5.stop();
                                    }
                                  }
                                }, _callee5, this);
                              })));
                              errorThrown = false;
                              _context6.prev = 2;
                              _context6.next = 5;
                              return (0, _src.default)('http://www.test.com/products/1234');

                            case 5:
                              _context6.next = 13;
                              break;

                            case 7:
                              _context6.prev = 7;
                              _context6.t0 = _context6["catch"](2);
                              errorThrown = true;
                              (0, _goodeggsTestHelpers.expect)(_context6.t0.name).to.deep.equal('FetchError');
                              (0, _goodeggsTestHelpers.expect)(_context6.t0.message).to.deep.equal('Something is broken!');
                              (0, _goodeggsTestHelpers.expect)(_context6.t0.request.url).to.deep.equal('http://www.test.com/products/1234');

                            case 13:
                              (0, _goodeggsTestHelpers.expect)(errorThrown).to.be.true();

                            case 14:
                            case "end":
                              return _context6.stop();
                          }
                        }
                      }, _callee6, this, [[2, 7]]);
                    })));
                    (0, _mocha.it)('rejects with responseText when there is a json parse error',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee7() {
                      var errorThrown;
                      return _regenerator.default.wrap(function _callee7$(_context7) {
                        while (1) {
                          switch (_context7.prev = _context7.next) {
                            case 0:
                              (0, _nock.default)('http://www.test.com').get('/products/1234').reply(200, 'foo', {
                                'Content-Type': 'application/json; charset=utf-8'
                              });
                              errorThrown = false;
                              _context7.prev = 2;
                              _context7.next = 5;
                              return (0, _src.default)('http://www.test.com/products/1234');

                            case 5:
                              _context7.next = 15;
                              break;

                            case 7:
                              _context7.prev = 7;
                              _context7.t0 = _context7["catch"](2);
                              errorThrown = true;
                              (0, _goodeggsTestHelpers.expect)(_context7.t0.name).to.deep.equal('SyntaxError');
                              (0, _goodeggsTestHelpers.expect)(_context7.t0.message).to.match(/Unexpected token/);
                              (0, _goodeggsTestHelpers.expect)(_context7.t0.response.text).to.deep.equal('foo');
                              (0, _goodeggsTestHelpers.expect)(_context7.t0.response.status).to.deep.equal(200);
                              (0, _goodeggsTestHelpers.expect)(_context7.t0.request.url).to.deep.equal('http://www.test.com/products/1234');

                            case 15:
                              (0, _goodeggsTestHelpers.expect)(errorThrown).to.be.true();

                            case 16:
                            case "end":
                              return _context7.stop();
                          }
                        }
                      }, _callee7, this, [[2, 7]]);
                    })));
                    (0, _mocha.it)('sends json request body',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee8() {
                      var response;
                      return _regenerator.default.wrap(function _callee8$(_context8) {
                        while (1) {
                          switch (_context8.prev = _context8.next) {
                            case 0:
                              (0, _nock.default)('http://www.test.com').post('/products/1234', {
                                name: 'apple'
                              }).reply(201, {
                                _id: '1234',
                                name: 'apple'
                              });
                              _context8.next = 3;
                              return (0, _src.default)('http://www.test.com/products/1234', {
                                method: 'POST',
                                body: {
                                  name: 'apple'
                                }
                              });

                            case 3:
                              response = _context8.sent;
                              (0, _goodeggsTestHelpers.expect)(response.body).to.deep.equal({
                                _id: '1234',
                                name: 'apple'
                              });
                              (0, _goodeggsTestHelpers.expect)(response.status).to.equal(201);
                              (0, _goodeggsTestHelpers.expect)(response.statusText).to.equal('Created');
                              (0, _goodeggsTestHelpers.expect)(response.headers).to.be.ok();

                            case 8:
                            case "end":
                              return _context8.stop();
                          }
                        }
                      }, _callee8, this);
                    })));

                  case 7:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9, this);
          })));
          (0, _mocha.describe)('expected statuses', function () {
            (0, _mocha.it)('errors with FetchUnexpectedStatus if the response has an unexpected status code',
            /*#__PURE__*/
            (0, _asyncToGenerator2.default)(
            /*#__PURE__*/
            _regenerator.default.mark(function _callee10() {
              return _regenerator.default.wrap(function _callee10$(_context10) {
                while (1) {
                  switch (_context10.prev = _context10.next) {
                    case 0:
                      (0, _nock.default)('http://www.test.com').get('/products/1234').reply(400, 'not found');
                      _context10.prev = 1;
                      _context10.next = 4;
                      return (0, _src.default)('http://www.test.com/products/1234', {
                        expectedStatuses: [201]
                      });

                    case 4:
                      _context10.next = 14;
                      break;

                    case 6:
                      _context10.prev = 6;
                      _context10.t0 = _context10["catch"](1);
                      (0, _goodeggsTestHelpers.expect)(_context10.t0.name).to.equal('FetchUnexpectedStatusError');
                      (0, _goodeggsTestHelpers.expect)(_context10.t0.message).to.equal('Unexpected fetch response status 400');
                      (0, _goodeggsTestHelpers.expect)(_context10.t0.request.url).to.equal('http://www.test.com/products/1234');
                      (0, _goodeggsTestHelpers.expect)(_context10.t0.response).to.have.property('status', 400);
                      (0, _goodeggsTestHelpers.expect)(_context10.t0.response).to.have.property('text', 'not found');
                      return _context10.abrupt("return");

                    case 14:
                      throw new Error('expected to throw');

                    case 15:
                    case "end":
                      return _context10.stop();
                  }
                }
              }, _callee10, this, [[1, 6]]);
            })));
            (0, _mocha.it)('returns a response with an expected status code',
            /*#__PURE__*/
            (0, _asyncToGenerator2.default)(
            /*#__PURE__*/
            _regenerator.default.mark(function _callee11() {
              var response;
              return _regenerator.default.wrap(function _callee11$(_context11) {
                while (1) {
                  switch (_context11.prev = _context11.next) {
                    case 0:
                      (0, _nock.default)('http://www.test.com').get('/products/1234').reply(201, 'not found');
                      _context11.next = 3;
                      return (0, _src.default)('http://www.test.com/products/1234', {
                        expectedStatuses: [201]
                      });

                    case 3:
                      response = _context11.sent;
                      (0, _goodeggsTestHelpers.expect)(response).to.have.property('status', 201);

                    case 5:
                    case "end":
                      return _context11.stop();
                  }
                }
              }, _callee11, this);
            })));
            (0, _mocha.it)('returns a response without an expected status code',
            /*#__PURE__*/
            (0, _asyncToGenerator2.default)(
            /*#__PURE__*/
            _regenerator.default.mark(function _callee12() {
              var response;
              return _regenerator.default.wrap(function _callee12$(_context12) {
                while (1) {
                  switch (_context12.prev = _context12.next) {
                    case 0:
                      (0, _nock.default)('http://www.test.com').get('/products/1234').reply(404, 'not found');
                      _context12.next = 3;
                      return (0, _src.default)('http://www.test.com/products/1234');

                    case 3:
                      response = _context12.sent;
                      (0, _goodeggsTestHelpers.expect)(response).to.have.property('status', 404);

                    case 5:
                    case "end":
                      return _context12.stop();
                  }
                }
              }, _callee12, this);
            })));
          });
          (0, _mocha.describe)('retry',
          /*#__PURE__*/
          (0, _asyncToGenerator2.default)(
          /*#__PURE__*/
          _regenerator.default.mark(function _callee18() {
            return _regenerator.default.wrap(function _callee18$(_context18) {
              while (1) {
                switch (_context18.prev = _context18.next) {
                  case 0:
                    (0, _mocha.beforeEach)(function () {
                      sandbox.spy(global, 'fetch');
                    });
                    (0, _mocha.afterEach)(function () {
                      fetch.restore();
                    });
                    (0, _mocha.it)('does not retry by default',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee13() {
                      return _regenerator.default.wrap(function _callee13$(_context13) {
                        while (1) {
                          switch (_context13.prev = _context13.next) {
                            case 0:
                              (0, _nock.default)('http://www.test.com').get('/').reply(200, {});
                              _context13.next = 3;
                              return (0, _src.default)('http://www.test.com/');

                            case 3:
                              (0, _goodeggsTestHelpers.expect)(fetch.callCount).to.equal(1);

                            case 4:
                            case "end":
                              return _context13.stop();
                          }
                        }
                      }, _callee13, this);
                    })));
                    (0, _mocha.it)('does specified number of retries',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee14() {
                      return _regenerator.default.wrap(function _callee14$(_context14) {
                        while (1) {
                          switch (_context14.prev = _context14.next) {
                            case 0:
                              (0, _nock.default)('http://www.test.com').get('/').reply(200, {});
                              _context14.prev = 1;
                              _context14.next = 4;
                              return (0, _src.default)('http://www.test.com/', {
                                shouldRetry: function shouldRetry() {
                                  return true;
                                },
                                retry: {
                                  retries: 5,
                                  factor: 0
                                }
                              });

                            case 4:
                              _context14.next = 12;
                              break;

                            case 6:
                              _context14.prev = 6;
                              _context14.t0 = _context14["catch"](1);
                              (0, _goodeggsTestHelpers.expect)(_context14.t0.request.url).to.equal('http://www.test.com/');
                              (0, _goodeggsTestHelpers.expect)(_context14.t0.request.retry.retries).to.equal(5);
                              (0, _goodeggsTestHelpers.expect)(fetch.callCount).to.equal(6); // 5 retries + 1 original = 6

                              return _context14.abrupt("return");

                            case 12:
                              throw new Error('Should have failed');

                            case 13:
                            case "end":
                              return _context14.stop();
                          }
                        }
                      }, _callee14, this, [[1, 6]]);
                    })));
                    (0, _mocha.it)('respects the shouldRetry() function',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee15() {
                      return _regenerator.default.wrap(function _callee15$(_context15) {
                        while (1) {
                          switch (_context15.prev = _context15.next) {
                            case 0:
                              (0, _nock.default)('http://www.test.com').get('/').times(6).reply(200, {});
                              _context15.prev = 1;
                              _context15.next = 4;
                              return (0, _src.default)('http://www.test.com/', {
                                shouldRetry: function shouldRetry() {
                                  return fetch.callCount < 3;
                                },
                                retry: {
                                  retries: 5,
                                  factor: 0
                                }
                              });

                            case 4:
                              _context15.next = 9;
                              break;

                            case 6:
                              _context15.prev = 6;
                              _context15.t0 = _context15["catch"](1);
                              throw new Error('Should not fail');

                            case 9:
                              (0, _goodeggsTestHelpers.expect)(fetch.callCount).to.equal(3); // 2 retries + 1 original = 3

                            case 10:
                            case "end":
                              return _context15.stop();
                          }
                        }
                      }, _callee15, this, [[1, 6]]);
                    })));
                    (0, _mocha.it)('respects the should retry function for a network error',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee16() {
                      return _regenerator.default.wrap(function _callee16$(_context16) {
                        while (1) {
                          switch (_context16.prev = _context16.next) {
                            case 0:
                              fetch.restore(); // Don't double stub!

                              sandbox.stub(global, 'fetch').returns(Promise.reject(new Error('ECONRST')));
                              _context16.prev = 2;
                              _context16.next = 5;
                              return (0, _src.default)('foo.bar', {
                                shouldRetry: function shouldRetry() {
                                  return true;
                                },
                                retry: {
                                  retries: 5,
                                  factor: 0
                                }
                              });

                            case 5:
                              _context16.next = 12;
                              break;

                            case 7:
                              _context16.prev = 7;
                              _context16.t0 = _context16["catch"](2);
                              (0, _goodeggsTestHelpers.expect)(fetch.callCount).to.equal(6);
                              (0, _goodeggsTestHelpers.expect)(_context16.t0.message).to.equal('ECONRST');
                              return _context16.abrupt("return");

                            case 12:
                              throw new Error('Should have failed');

                            case 13:
                            case "end":
                              return _context16.stop();
                          }
                        }
                      }, _callee16, this, [[2, 7]]);
                    })));
                    (0, _mocha.it)('adds the retryCount to the error',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee17() {
                      return _regenerator.default.wrap(function _callee17$(_context17) {
                        while (1) {
                          switch (_context17.prev = _context17.next) {
                            case 0:
                              fetch.restore(); // Don't double stub!

                              sandbox.stub(global, 'fetch').returns(Promise.reject(new Error('ECONRST')));
                              _context17.prev = 2;
                              _context17.next = 5;
                              return (0, _src.default)('foo.bar', {
                                shouldRetry: function shouldRetry() {
                                  return true;
                                },
                                retry: {
                                  retries: 5,
                                  factor: 0
                                }
                              });

                            case 5:
                              _context17.next = 13;
                              break;

                            case 7:
                              _context17.prev = 7;
                              _context17.t0 = _context17["catch"](2);
                              (0, _goodeggsTestHelpers.expect)(fetch.callCount).to.equal(6);
                              (0, _goodeggsTestHelpers.expect)(_context17.t0.message).to.equal('ECONRST');
                              (0, _goodeggsTestHelpers.expect)(_context17.t0.retryCount).to.equal(5);
                              return _context17.abrupt("return");

                            case 13:
                              throw new Error('Should have failed');

                            case 14:
                            case "end":
                              return _context17.stop();
                          }
                        }
                      }, _callee17, this, [[2, 7]]);
                    })));

                  case 7:
                  case "end":
                    return _context18.stop();
                }
              }
            }, _callee18, this);
          })));
          (0, _mocha.describe)('retriers',
          /*#__PURE__*/
          (0, _asyncToGenerator2.default)(
          /*#__PURE__*/
          _regenerator.default.mark(function _callee29() {
            return _regenerator.default.wrap(function _callee29$(_context29) {
              while (1) {
                switch (_context29.prev = _context29.next) {
                  case 0:
                    (0, _mocha.describe)('.is5xx',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee23() {
                      return _regenerator.default.wrap(function _callee23$(_context23) {
                        while (1) {
                          switch (_context23.prev = _context23.next) {
                            case 0:
                              (0, _mocha.it)('accepts a 503 and 504 status codes',
                              /*#__PURE__*/
                              (0, _asyncToGenerator2.default)(
                              /*#__PURE__*/
                              _regenerator.default.mark(function _callee19() {
                                return _regenerator.default.wrap(function _callee19$(_context19) {
                                  while (1) {
                                    switch (_context19.prev = _context19.next) {
                                      case 0:
                                        (0, _goodeggsTestHelpers.expect)(_src.retriers.is5xx(new Response('', {
                                          status: 503
                                        }))).to.equal(true);
                                        (0, _goodeggsTestHelpers.expect)(_src.retriers.is5xx(new Response('', {
                                          status: 504
                                        }))).to.equal(true);

                                      case 2:
                                      case "end":
                                        return _context19.stop();
                                    }
                                  }
                                }, _callee19, this);
                              })));
                              (0, _mocha.it)('rejects all other inputs',
                              /*#__PURE__*/
                              (0, _asyncToGenerator2.default)(
                              /*#__PURE__*/
                              _regenerator.default.mark(function _callee20() {
                                return _regenerator.default.wrap(function _callee20$(_context20) {
                                  while (1) {
                                    switch (_context20.prev = _context20.next) {
                                      case 0:
                                        (0, _goodeggsTestHelpers.expect)(_src.retriers.is5xx(new Error())).to.equal(false);
                                        (0, _goodeggsTestHelpers.expect)(_src.retriers.is5xx(new Response('', {
                                          status: 200
                                        }))).to.equal(false);
                                        (0, _goodeggsTestHelpers.expect)(_src.retriers.is5xx(new Response('', {
                                          status: 400
                                        }))).to.equal(false);
                                        (0, _goodeggsTestHelpers.expect)(_src.retriers.is5xx(new Response('', {
                                          status: 404
                                        }))).to.equal(false);
                                        (0, _goodeggsTestHelpers.expect)(_src.retriers.is5xx(new Response('', {
                                          status: 499
                                        }))).to.equal(false);
                                        (0, _goodeggsTestHelpers.expect)(_src.retriers.is5xx(new Response('', {
                                          status: 500
                                        }))).to.equal(false);
                                        (0, _goodeggsTestHelpers.expect)(_src.retriers.is5xx(new Response('', {
                                          status: 501
                                        }))).to.equal(false);
                                        (0, _goodeggsTestHelpers.expect)(_src.retriers.is5xx(new Response('', {
                                          status: 502
                                        }))).to.equal(false);

                                      case 8:
                                      case "end":
                                        return _context20.stop();
                                    }
                                  }
                                }, _callee20, this);
                              })));
                              (0, _mocha.describe)('used within jsonFetch',
                              /*#__PURE__*/
                              (0, _asyncToGenerator2.default)(
                              /*#__PURE__*/
                              _regenerator.default.mark(function _callee22() {
                                return _regenerator.default.wrap(function _callee22$(_context22) {
                                  while (1) {
                                    switch (_context22.prev = _context22.next) {
                                      case 0:
                                        (0, _mocha.afterEach)(function () {
                                          fetch.restore();
                                        });
                                        (0, _mocha.it)('attempts to retry on a 5xx error code',
                                        /*#__PURE__*/
                                        (0, _asyncToGenerator2.default)(
                                        /*#__PURE__*/
                                        _regenerator.default.mark(function _callee21() {
                                          return _regenerator.default.wrap(function _callee21$(_context21) {
                                            while (1) {
                                              switch (_context21.prev = _context21.next) {
                                                case 0:
                                                  sandbox.spy(_src.retriers, 'is5xx');
                                                  sandbox.stub(global, 'fetch').returns(Promise.resolve({
                                                    status: 503
                                                  }));
                                                  _context21.prev = 2;
                                                  _context21.next = 5;
                                                  return (0, _src.default)('http://www.test.com/', {
                                                    shouldRetry: _src.retriers.is5xx,
                                                    retry: {
                                                      retries: 3,
                                                      factor: 0
                                                    }
                                                  });

                                                case 5:
                                                  _context21.next = 12;
                                                  break;

                                                case 7:
                                                  _context21.prev = 7;
                                                  _context21.t0 = _context21["catch"](2);
                                                  (0, _goodeggsTestHelpers.expect)(fetch.callCount).to.equal(4);
                                                  (0, _goodeggsTestHelpers.expect)(_src.retriers.is5xx.callCount).to.equal(4);
                                                  return _context21.abrupt("return");

                                                case 12:
                                                  throw new Error('Should have failed');

                                                case 13:
                                                case "end":
                                                  return _context21.stop();
                                              }
                                            }
                                          }, _callee21, this, [[2, 7]]);
                                        })));

                                      case 2:
                                      case "end":
                                        return _context22.stop();
                                    }
                                  }
                                }, _callee22, this);
                              })));

                            case 3:
                            case "end":
                              return _context23.stop();
                          }
                        }
                      }, _callee23, this);
                    })));
                    (0, _mocha.describe)('.isNetworkError',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee28() {
                      return _regenerator.default.wrap(function _callee28$(_context28) {
                        while (1) {
                          switch (_context28.prev = _context28.next) {
                            case 0:
                              (0, _mocha.it)('accepts any errors',
                              /*#__PURE__*/
                              (0, _asyncToGenerator2.default)(
                              /*#__PURE__*/
                              _regenerator.default.mark(function _callee24() {
                                return _regenerator.default.wrap(function _callee24$(_context24) {
                                  while (1) {
                                    switch (_context24.prev = _context24.next) {
                                      case 0:
                                        (0, _goodeggsTestHelpers.expect)(_src.retriers.isNetworkError(new Error())).to.equal(true);

                                      case 1:
                                      case "end":
                                        return _context24.stop();
                                    }
                                  }
                                }, _callee24, this);
                              })));
                              (0, _mocha.it)('rejects any non errors',
                              /*#__PURE__*/
                              (0, _asyncToGenerator2.default)(
                              /*#__PURE__*/
                              _regenerator.default.mark(function _callee25() {
                                return _regenerator.default.wrap(function _callee25$(_context25) {
                                  while (1) {
                                    switch (_context25.prev = _context25.next) {
                                      case 0:
                                        (0, _goodeggsTestHelpers.expect)(_src.retriers.isNetworkError(new Response('foo'))).to.equal(false);
                                        (0, _goodeggsTestHelpers.expect)(_src.retriers.isNetworkError(new Response(''))).to.equal(false);
                                        (0, _goodeggsTestHelpers.expect)(_src.retriers.isNetworkError(new Response('', {
                                          status: 200
                                        }))).to.equal(false);
                                        (0, _goodeggsTestHelpers.expect)(_src.retriers.isNetworkError(new Response('', {
                                          status: 500
                                        }))).to.equal(false);

                                      case 4:
                                      case "end":
                                        return _context25.stop();
                                    }
                                  }
                                }, _callee25, this);
                              })));
                              (0, _mocha.describe)('used within jsonFetch',
                              /*#__PURE__*/
                              (0, _asyncToGenerator2.default)(
                              /*#__PURE__*/
                              _regenerator.default.mark(function _callee27() {
                                return _regenerator.default.wrap(function _callee27$(_context27) {
                                  while (1) {
                                    switch (_context27.prev = _context27.next) {
                                      case 0:
                                        (0, _mocha.afterEach)(function () {
                                          fetch.restore();
                                        });
                                        (0, _mocha.it)('attempts to retry on a network error',
                                        /*#__PURE__*/
                                        (0, _asyncToGenerator2.default)(
                                        /*#__PURE__*/
                                        _regenerator.default.mark(function _callee26() {
                                          return _regenerator.default.wrap(function _callee26$(_context26) {
                                            while (1) {
                                              switch (_context26.prev = _context26.next) {
                                                case 0:
                                                  sandbox.spy(_src.retriers, 'isNetworkError');
                                                  sandbox.stub(global, 'fetch').returns(Promise.reject(new Error('ECONRST')));
                                                  _context26.prev = 2;
                                                  _context26.next = 5;
                                                  return (0, _src.default)('foo.bar', {
                                                    shouldRetry: _src.retriers.isNetworkError,
                                                    retry: {
                                                      retries: 5,
                                                      factor: 0
                                                    }
                                                  });

                                                case 5:
                                                  _context26.next = 13;
                                                  break;

                                                case 7:
                                                  _context26.prev = 7;
                                                  _context26.t0 = _context26["catch"](2);
                                                  (0, _goodeggsTestHelpers.expect)(fetch.callCount).to.equal(6);
                                                  (0, _goodeggsTestHelpers.expect)(_src.retriers.isNetworkError.callCount).to.equal(6);
                                                  (0, _goodeggsTestHelpers.expect)(_context26.t0.message).to.equal('ECONRST');
                                                  return _context26.abrupt("return");

                                                case 13:
                                                  throw new Error('Should have failed');

                                                case 14:
                                                case "end":
                                                  return _context26.stop();
                                              }
                                            }
                                          }, _callee26, this, [[2, 7]]);
                                        })));

                                      case 2:
                                      case "end":
                                        return _context27.stop();
                                    }
                                  }
                                }, _callee27, this);
                              })));

                            case 3:
                            case "end":
                              return _context28.stop();
                          }
                        }
                      }, _callee28, this);
                    })));

                  case 2:
                  case "end":
                    return _context29.stop();
                }
              }
            }, _callee29, this);
          })));
          (0, _mocha.describe)('malformed json',
          /*#__PURE__*/
          (0, _asyncToGenerator2.default)(
          /*#__PURE__*/
          _regenerator.default.mark(function _callee31() {
            return _regenerator.default.wrap(function _callee31$(_context31) {
              while (1) {
                switch (_context31.prev = _context31.next) {
                  case 0:
                    (0, _mocha.it)('throws error with malformed text',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee30() {
                      return _regenerator.default.wrap(function _callee30$(_context30) {
                        while (1) {
                          switch (_context30.prev = _context30.next) {
                            case 0:
                              (0, _nock.default)('http://www.test.com').get('/products/1234').reply(200, '{"name": "apple""}', {
                                'Content-Type': 'application/json'
                              });
                              _context30.prev = 1;
                              _context30.next = 4;
                              return (0, _src.default)('http://www.test.com/products/1234');

                            case 4:
                              _context30.next = 10;
                              break;

                            case 6:
                              _context30.prev = 6;
                              _context30.t0 = _context30["catch"](1);
                              (0, _goodeggsTestHelpers.expect)(_context30.t0.message).to.contain('Unexpected string');
                              return _context30.abrupt("return");

                            case 10:
                              throw new Error('expected to throw');

                            case 11:
                            case "end":
                              return _context30.stop();
                          }
                        }
                      }, _callee30, this, [[1, 6]]);
                    })));

                  case 1:
                  case "end":
                    return _context31.stop();
                }
              }
            }, _callee31, this);
          })));
          (0, _mocha.describe)('missing content type',
          /*#__PURE__*/
          (0, _asyncToGenerator2.default)(
          /*#__PURE__*/
          _regenerator.default.mark(function _callee33() {
            return _regenerator.default.wrap(function _callee33$(_context33) {
              while (1) {
                switch (_context33.prev = _context33.next) {
                  case 0:
                    (0, _mocha.it)('handles it gracefully',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee32() {
                      var response;
                      return _regenerator.default.wrap(function _callee32$(_context32) {
                        while (1) {
                          switch (_context32.prev = _context32.next) {
                            case 0:
                              (0, _nock.default)('http://www.test.com').get('/products/1234').reply(200, 'test', {});
                              _context32.next = 3;
                              return (0, _src.default)('http://www.test.com/products/1234');

                            case 3:
                              response = _context32.sent;
                              (0, _goodeggsTestHelpers.expect)(response.body).to.equal(undefined);

                            case 5:
                            case "end":
                              return _context32.stop();
                          }
                        }
                      }, _callee32, this);
                    })));

                  case 1:
                  case "end":
                    return _context33.stop();
                }
              }
            }, _callee33, this);
          })));
          (0, _mocha.describe)('thrown errors',
          /*#__PURE__*/
          (0, _asyncToGenerator2.default)(
          /*#__PURE__*/
          _regenerator.default.mark(function _callee35() {
            return _regenerator.default.wrap(function _callee35$(_context35) {
              while (1) {
                switch (_context35.prev = _context35.next) {
                  case 0:
                    (0, _mocha.it)('does not include request headers',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee34() {
                      return _regenerator.default.wrap(function _callee34$(_context34) {
                        while (1) {
                          switch (_context34.prev = _context34.next) {
                            case 0:
                              (0, _nock.default)('http://www.test.com').get('/products/1234').reply(200, '{""}', {
                                'Content-Type': 'application/json'
                              });
                              _context34.prev = 1;
                              _context34.next = 4;
                              return (0, _src.default)('http://www.test.com/products/1234', {
                                headers: {
                                  secret: 'foo'
                                }
                              });

                            case 4:
                              _context34.next = 11;
                              break;

                            case 6:
                              _context34.prev = 6;
                              _context34.t0 = _context34["catch"](1);
                              (0, _goodeggsTestHelpers.expect)(_context34.t0.request.url).to.equal('http://www.test.com/products/1234');
                              (0, _goodeggsTestHelpers.expect)(_context34.t0.request.headers).not.to.exist();
                              return _context34.abrupt("return");

                            case 11:
                              throw new Error('expected to throw');

                            case 12:
                            case "end":
                              return _context34.stop();
                          }
                        }
                      }, _callee34, this, [[1, 6]]);
                    })));

                  case 1:
                  case "end":
                    return _context35.stop();
                }
              }
            }, _callee35, this);
          })));

        case 8:
        case "end":
          return _context36.stop();
      }
    }
  }, _callee36, this);
})));